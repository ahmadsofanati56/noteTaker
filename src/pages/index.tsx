import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { Header } from "y/components/Header";
import {RouterOutputs, api} from "../utils/api";

import { useState } from "react";
import { json } from "stream/consumers";
import { NoteEditior } from "y/components/NoteEditior";
import { NoteCard } from "y/components/NoteCard";
export default function Home() {

  return (
    <>
      <Head>
        <title>Create T3 Appsadsadsa</title>
        <meta name="description" content="Generated by create-t3-appaaaa" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
     <Header/>
     <Content/>
      </main>
      
    </>
  );
  
}
 type Topic = RouterOutputs["topicRouter"]["getAll"][0];
const Content: React.FC = () => {
  const { data: sessionData} = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);

  const { data: topics, refetch: refetchTopics } = api.topicRouter.getAll.useQuery(
    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );
  const createTopic = api.topicRouter.create.useMutation({
    onSuccess: ()=> {
      refetchTopics();
    }
  });

  const {data:notes,refetch:refetchNotes} = api.noteRouter.getAll.useQuery({
    topicId : selectedTopic?.id ?? ""
  },{
    enabled: sessionData?.user !== undefined && selectedTopic !==null
  })

  const createNote= api.noteRouter.create.useMutation({
    onSuccess: void refetchNotes()
  })

  const deleteNote = api.noteRouter.delete.useMutation({
    onSuccess: void refetchNotes()
  })
  return <div className="mx-5 mt-5 grid grid-cols-4 gap-2">
    <div className="px-2">
    <ul className="menu bg-base-200 w-56 rounded-box">
    {topics?.map((topic)=>(<li key={topic.id}>
      <a href="#" 
      onClick={(evt)=> {
        evt.preventDefault();
        setSelectedTopic(topic) 
      }}>{topic.title}</a>

    </li>))}
    
    </ul>
      <div className="divider"></div>
    <input type="text" placeholder="New Topic" className="input input-bordered w-full input-sm" onKeyDown={(e)=> {
      if(e.key == "Enter"){
        createTopic.mutate({
          title: e.currentTarget.value
        });
        e.currentTarget.value="";
      }
    }} />
    </div>
    <div className="col-span-3">
      <div>{notes?.map((note)=>(<div className="mt-5" key={note.id}><NoteCard note={note} onDelete={()=>{void deleteNote.mutate({id: note.id})}}/></div>))}</div>
      <NoteEditior onSave={({title, content})=>{
        void createNote.mutate({
          title,
          content,
          topicId: selectedTopic?.id ?? ""
        })
      }} />
    </div>
    </div>
}

